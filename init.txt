;;;;; An Initial Program for "pure LISP" ;;;;;;
; Version 0.5.5
; (C) 2024-2025 Tsugu

; -------------------------------------
; Basic Functions

(de caar (x) (car (car x)))
(de cadr (x) (car (cdr x)))
(de cdar (x) (cdr (car x)))
(de cddr (x) (cdr (cdr x)))

(de caaar (x) (car (caar x)))
(de caadr (x) (car (cadr x)))
(de cadar (x) (car (cdar x)))
(de caddr (x) (car (cddr x)))

(de cdaar (x) (cdr (caar x)))
(de cdadr (x) (cdr (cadr x)))
(de cddar (x) (cdr (cdar x)))
(de cdddr (x) (cdr (cddr x)))

(de list x x)

(de null (x)
  (eq x '()))

(de and (x y)
  (cond ((null x) '())
        ('t (cond (y 't)
                  ('t '())))))

(de or (x y)
  (cond (x 't)
        ('t (cond ((null y) '())
                  ('t 't)))))

(de not (x)
  (cond (x '())
        ('t 't)))

(de reverse (l)
  ((lambda (acc)
    (while l
      (setq acc (cons (car l) acc))
      (setq l (cdr l)))
    acc)
  '()))

(de append (x y)
  ((lambda (x)
    (while (not (atom x))
      (setq y (cons (car x) y))
      (setq x (cdr x)))
    y)
  (reverse x)))

(de pair (x y)
  ((lambda (acc)
    (cond
      ((and (null x) (null y))
        '())
      ('t
        (while (and (not (atom x)) (not (atom y)))
          (setq acc (cons (cons (car x) (car y)) acc))
          (setq x (cdr x))
          (setq y (cdr y)))))
    acc)
  '()))

(de assoc (x y)
  (while (and y (not (eq x (caar y))))
    (setq y (cdr y)))
  (cdar y))

; -------------------------------
; Functions of Puseud Numbers (Very inefficient!)

(de add (x y)
  (append x y))

(de mult (x y)
  ((lambda (z)
    (while y
      (psetq y (cdr y)
             z (append x z))))
  '()))

(de sub (x y)
  (while y
    (psetq y (cdr y)
           x (cdr x)))
  x)

(de div (x y)
  ((lambda (z)
    (while (sub (add x #1) y)
      (psetq x (sub x y)
             z (cons 't z))))
  '()))

(de mod (x y)
    (while (sub (add x #1) y)
      (setq x (sub x y))))

(de f_list (f args)
  ((lambda (r)
    (setq args (cdr args))
    (while args
      (psetq args (cdr args)
             r (funcall f r (car args)))))
  (car args)))

(de + args
  (f_list 'append args)
)

(de * args
  (f_list 'mult args)
)

(de - args
  (f_list 'sub args)
)

(de / args
  (f_list 'div args)
)

(de % args
  (f_list 'mod args)
)

'0
#0
'1
#1
'2
#2
'3
#3
'4
#4
'5
#5

'365_/_12_=_30
(len (/ #365 #12))

'365_%_12_=_5
(len (% #365 #12))

(de fibo (n)
  (cond
    ((eq (sub n #1) #0) #1)
    ('t (+ (fibo (sub n #1)) (fibo (sub n #2))))))

'fibo_rec
((lambda (i r)
  (until (eq i #0)
    (setq i (sub i #1)
          r (cons (len (fibo i)) r)))
) #8 #0)

(de fibo (n cont)
  (cond
    ((eq (sub n #1) #0) (funcall cont #1))
    ('t
      (fibo (sub n #1)
        #'(lambda (x)
          (fibo (sub n #2)
            #'(lambda (y) (funcall cont (add x y)))))))))

'fibo_cont
((lambda (i r)
  (until (eq i #0)
    (setq i (sub i #1)
          r (cons (len (fibo i #'(lambda (x) x))) r)))
) #8 #0)

(de fibo (n)
  ((lambda (a1 a2)
    (while n
      (psetq n (sub n #1)
             a1 a2
             a2 (+ a1 a2)))
    a2)
  #0 #1))

'fibo_loop
((lambda (i r)
  (until (eq i #0)
    (setq i (sub i #1)
          r (cons (len (fibo i)) r)))
) #8 #0)

; -----------------------------
; macro test

(dm if (check then else)
  `(cond (,check ,then) (t ,else)))

(if (atom '()) 'Yes 'No)
(if (atom '(a)) 'Yes 'No)

(de comp (x y)
  (cond ((sub x y) '>)
        ((sub y x) '<)
        ('t '=)))

; Variable collisions by a macro.
;
(dm switch (x y plusform zeroform minusform)
  `((lambda (var)
    (cond ((eq var '>) ,plusform)
           ((eq var '<) ,minusform)
           ('t ,zeroform)))
  (comp ,x ,y)))
;
((lambda (var2) (switch var2 #5 var2 () ())) #6)
((lambda (var) (switch var #5 var () ())) #6)

; Collision avoidance with "gensym".
;
(dm switch (x y plusform zeroform minusform)
  ((lambda (var) `(
    (lambda (,var)
      (cond ((eq ,var '>) ,plusform)
            ((eq ,var '<) ,minusform)
            ('t ,zeroform)))
    (comp ,x ,y)))
  (gensym)))
;
((lambda (var) (switch var #5 var () ())) #6)

; -----------------------------
; Z combinator

(de Z (f)
    ((lambda (X) (funcall f #'(lambda x (apply (funcall X X) x))))
     #'(lambda (X) (funcall f #'(lambda x (apply (funcall X X) x))))))

(de reverse_Z (l)
    (funcall (Z
      #'(lambda (f)
        #'(lambda (l acc)
          (cond ((null l) acc)
                (t (funcall f (cdr l) (cons (car l) acc)))))))
     l '()))

'reverse_Z
(reverse_Z '(A B C D E F G H I J))
