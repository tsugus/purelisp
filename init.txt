; (C) 2024-2025 Tsugu
; Version 0.4.0

; -------------------------------------
; Basic Functions

(de caar (x) (car (car x)))
(de cadr (x) (car (cdr x)))
(de cdar (x) (cdr (car x)))
(de cddr (x) (cdr (cdr x)))

(de caaar (x) (car (caar x)))
(de caadr (x) (car (cadr x)))
(de cadar (x) (car (cdar x)))
(de caddr (x) (car (cddr x)))

(de cdaar (x) (cdr (caar x)))
(de cdadr (x) (cdr (cadr x)))
(de cddar (x) (cdr (cdar x)))
(de cdddr (x) (cdr (cddr x)))

(de caddar (x) (car (cddar x)))

(de list x x)

(de null (x)
  (eq x '()))

(de and (x y)
  (cond ((null x) '())
        ('t (cond (y 't)
                  ('t '())))))

(de or (x y)
  (cond (x 't)
        ('t (cond ((null y) '())
                  ('t 't)))))

(de not (x)
  (cond (x '())
        ('t 't)))

(de reverse (l) (
  (lambda (acc)
    (while l
      (setq acc (cons (car l) acc))
      (setq l (cdr l)))
    acc)
  '()))

(de append (x y) (
  (lambda (x)
    (while (not (atom x))
      (setq y (cons (car x) y))
      (setq x (cdr x)))
    y)
  (reverse x)))

(de pair (x y) (
  (lambda (acc)
    (cond
      ((and (null x) (null y))
        '())
      ('t
        (while (and (not (atom x)) (not (atom y)))
          (setq acc (cons (cons (car x) (car y)) acc))
          (setq x (cdr x))
          (setq y (cdr y)))))
    acc)
  '()))

(de assoc (x y)
  (while (and y (not (eq x (caar y))))
    (setq y (cdr y)))
  (cdar y))

; -------------------------------------
; A Metacircular Evaluator (, which is based on "The Roots of Lisp" by Paul Graham)

(de eval_ (e a)
  (cond
    ((atom e) (assoc e a))
    ((atom (car e))
    (cond
      ((eq (car e) 'quote) (cadr e))
      ((eq (car e) 'atom) (atom (eval_ (cadr e) a)))
      ((eq (car e) 'eq) (eq (eval_ (cadr e) a)
                            (eval_ (caddr e) a)))
      ((eq (car e) 'car) (car (eval_ (cadr e) a)))
      ((eq (car e) 'cdr) (cdr (eval_ (cadr e) a)))
      ((eq (car e) 'cons) (cons (eval_ (cadr e) a)
                                (eval_ (caddr e) a)))
      ((eq (car e) 'cond) (evcon (cdr e) a))
      ((eq (car e) 'setq) (envset (cadr e)
                                  (eval_ (caddr e) a) a))
      ((eq (car e) 'while) (while (eval_ (cadr e) a)
                                  (evals (cddr e) a)))
      ((eq (car e) 'until) (until (eval_ (cadr e) a)
                                  (evals (cddr e) a)))
      ((eq (car e) 'rplaca) (rplaca (eval_ (cadr e) a)
                                    (eval_ (caddr e) a)))
      ((eq (car e) 'rplacd) (rplacd (eval_ (cadr e) a)
                                    (eval_ (caddr e) a)))
      ('t (eval_ (cons (assoc (car e) a) (cdr e)) a))))
    ((eq (caar e) 'label)
      (eval_ (cons (caddar e) (cdr e))
        (cons (cons (cadar e) (car e)) a)))
    ((eq (caar e) 'lambda)
      (evals (cddar e)
        (append (pair (cadar e) (evlis (cdr e) a)) a)))))

(de evcon (c a)
    (while (and c (not (eval_ (caar c) a)))
      (setq c (cdr c)))
    (evals (cdar c) a))

(de evlis (m a) (
  (lambda (m acc)
    (while m
      (setq acc (cons (eval_ (car m) a) acc))
      (setq m (cdr m)))
    acc)
  (reverse m) '()))

; Sequential evaluation of the elements of a list
(de evals (l env) (
  (lambda (rslt)
    (while l
      (setq rslt (eval_ (car l) env))
      (setq l (cdr l))
    rslt))
  '()))

; In an environment list, set y at x.
(de envset (x y env) (
  (lambda (l)
    (while (and l (not (eq x (caar l))))
      (setq l (cdr l)))
    (cond (l (rplacd (car l) y)))
    y)
  env))

; -------------------------------

(de append_rec (l m)
  (cond ((null l) m)
        ('t (cons (car l)
                  (append_rec (cdr l) m)))))

(de append_cont (l m cont)
  (cond
    ((null l) (funcall cont m))
    ('t (append_cont (cdr l) m
      #'(lambda (x) (funcall cont (cons (car l) x)))))))

(de append_contloop (l m cont)
  (while l
    (setq cont #'(lambda (x) (funcall cont (cons (car l) x)))
          l (cdr l)))
  (funcall cont m))

; -------------------------------

(de add (x y)
  (append x y))

(de mult (x y) (
  (lambda (z)
    (while y
      (psetq y (cdr y)
             z (append x z))))
  '()))

(de sub (x y)
  (while y
    (psetq y (cdr y)
           x (cdr x)))
  x)

(de div (x y) (
  (lambda (z)
    (while (sub (add x #1) y)
      (psetq x (sub x y)
             z (cons 't z))))
  '()))

(de mod (x y)
    (while (sub (add x #1) y)
      (setq x (sub x y))))


(de f_list (f args) (
  (lambda (r)
    (setq args (cdr args))
    (while args
      (psetq args (cdr args)
             r (funcall f r (car args)))))
  (car args)))

(de + args
  (f_list 'append args)
)

(de * args
  (f_list 'mult args)
)

(de - args
  (f_list 'sub args)
)

(de / args
  (f_list 'div args)
)

(de % args
  (f_list 'mod args)
)

(de fibo_rec (n)
  (cond
    ((eq (- n #1) #0) #1)
    ('t (+ (fibo_rec (- n #1)) (fibo_rec (- n #2))))))

(de fibo_cont (n cont)
  (cond
    ((eq (- n #1) #0) (funcall cont #1))
    ('t
      (fibo_cont (- n #1)
        #'(lambda (x)
          (fibo_cont (- n #2)
            #'(lambda (y) (funcall cont (+ x y)))))))))

(de fibo_loop (n) (
  (lambda (a1 a2)
    (while n
      (psetq n (- n #1)
             a1 a2
             a2 (+ a1 a2)))
    a2)
  #0 #1))

; -------------------------------------
; Test 1

; = a
(eval_ 'x '((x.a) (y.b)))

; = t
(eval_ '(eq 'a 'a) '())

; = (a b c)
(eval_ '(cons x '(b c)) '((x.a) (y.b)))

; = list
(eval_ '(cond ((atom x) 'atom)
              ('t 'list))
'((x '(a b))))

; = (a b c)
(eval_ '(f '(b c))
'((f . (lambda (x) (cons 'a x)))))

; = a
(eval_ '(
  (label firstatom (lambda (x)
    (cond ((atom x) x)
          ('t (firstatom (car x))))))
  y)
'((y . ((a b) (c d)))))

; = (a c d)
(eval_ '(
  (lambda (x y) (cons x (cdr y)))
  'a
  '(b c d))
'())

; -------------------------------------
; Test 2

(eval_ '(
  (lambda (l) (
    (lambda (acc)
      (while l
        (setq acc (cons (car l) acc))
        (setq l (cdr l))
        acc))
    '()))
  '(1 2 3 4 5 6 7)
) '())

(eval_ '(
  (lambda (x y) (
    (lambda (x)
      (while (cond ((atom x) '())
                   ('t 't))
        (setq y (cons (car x) y))
        (setq x (cdr x)))
      y)
    (
      (lambda (l) (
        (lambda (acc)
          (while l
            (setq acc (cons (car l) acc))
            (setq l (cdr l))
            acc))
        '()))
      x)))
  '(1 2 3 4 5) '(6 7)
) '())

; -----------------------------
; test 3

'append_rec
(append_rec '(A B C D E) '(F G))

'append_cont
(append_cont '(A B C D E) '(F G) #'(lambda (x) x))

'append_contloop
(append_contloop '(A B C D E) '(F G) #'(lambda (x) x))

; -----------------------------
; test 4

'fibo_rec
((lambda (i r)
  (until (eq i #0)
    (setq i (- i #1)
          r (cons (len (fibo_rec i)) r)))
) #7 #0)

'fibo_cont
((lambda (i r)
  (until (eq i #0)
    (setq i (- i #1)
          r (cons (len (fibo_cont i #'(lambda (x) x))) r)))
) #7 #0)

'fibo_loop
((lambda (i r)
  (until (eq i #0)
    (setq i (- i #1)
          r (cons (len (fibo_loop i)) r)))
) #7 #0)
